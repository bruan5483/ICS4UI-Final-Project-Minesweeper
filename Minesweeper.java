//import essentials for the program
import javax.swing.*;
import java.awt.*; 
import java.awt.event.*; 
import java.time.Duration;
import java.io.*;
import java.util.Scanner;

/*
 * Minesweeper EXTENDS board
 * Minesweeper is-a board
 * Minesweeper uses the 2D int array generated by the superclass Board to make its own 2D Square array
 * Sets up the GUI for the minesweeper game
 */
public class Minesweeper extends Board {
  //instance variables
  private String difficultly;
  private JFrame frame;
  private Square[][] squareBoard;
  private Stopwatch stopwatch;
  private int numFlags;
  private boolean gameWon;
  private boolean turnToFix;
  //to get to levels screen
  private JButton playAgain;
  //to get to home screen, mainly to be able to access when happens when the button is pressed
  private JButton home;
  //boolean finalDisable is to prevent any ability for the player to somehow get around disabled buttons and continue pressing them (weird thing with right-click)
  private boolean finalDisable;

  //instance variables for fastest times taken for each difficulty level
  private File highScores;
  private Scanner scan;
  private Duration easyD;
  private Duration mediumD;
  private Duration hardD;
  
  /*
   * MouseListener to be shared by each Square object and allows them to perform their function, being guessed or set as a flag
   */
  MouseListener mouseListener = new MouseAdapter() {
    public void mousePressed(MouseEvent mouseEvent) {
      //get the source of which Square was pressed that was detected by the MouseListener
      Square button = (Square)mouseEvent.getSource();

      //if the left mouse button is pressed, the button has not already been guessed, and finalDisable has not been set to true
      if (SwingUtilities.isLeftMouseButton(mouseEvent) && !button.isGuessed() && !finalDisable) {
        //if the player tries to left-click on different square when they had previously set a flag on an incorrect square on the previous turn, call the wrongFlag() helper method to end the game
        if (turnToFix){
          wrongFlag(button);
        }

        //call the button function helper method
        buttonFunction(button);
      }
      
      //if the right mouse button is pressed and finalDisable has not been set to true
      if (SwingUtilities.isRightMouseButton(mouseEvent) && !finalDisable) {
        
        if (!button.getIsFlag()){
          if(!button.isGuessed()){

            //if the player tries to set another flag while the previous flag is still incorrect, call the wrongFlag helper method to end the game 
            if (turnToFix){
              wrongFlag(button);
            }
            
            button.setFlag();
            //add 1 to the flag count
            numFlags++;
            //update top of frame with new number of flags
            setTop();

            //if the button has been set as a flag but is not a mine, set turnToFix to true so that the player has one turn to rectify the mistake
            if (!button.mineCheck()){
              turnToFix = true;
            }
          }
        } else {
          //removes the flag icon from button
          button.resetFlag();
          //remove 1 from the flag count
          numFlags--;
          //update top of frame with new number of flags
          setTop();

          //since the square is a flag (from the first if-else), if turnToFix is true and the right-clicked Square is not actually a mine, the player is fixing their mistake 
          if (turnToFix && !button.mineCheck()){
            turnToFix = false;
          }
        }
        
        //check if the game has been won
        if (!finalDisable && !turnToFix) {
          gameWon = true;

          //break out of nested for loop code from https://stackoverflow.com/questions/886955/how-do-i-break-out-of-nested-loops-in-java
          out:
          for (int r=0; r<squareBoard.length; r++){
            for (int c=0; c<squareBoard[r].length; c++){
              if (!squareBoard[r][c].isGuessed()){
                gameWon = false;
                break out;
              }
            }
          }

          //what happens when the game is won
          if (gameWon){
            //activate finalDisable
            finalDisable = true;
            
            //stop the stopwatch and get the final Duration
            Duration duration = stopwatch.stop();

            //if the difficulty is easy and the ending duration was faster than the previous time for easy, set easyD equal to duration
            if (difficultly.equals("easy") && easyD.compareTo(duration)>0){
              easyD = duration;
            //else if the difficulty is medium and the ending duration was faster than the previous time for medium, set mediumD equal to duration
            } else if (difficultly.equals("medium") && mediumD.compareTo(duration)>0){
              mediumD = duration;
            //else if the difficulty is hard and the ending duration was faster than the previous time for hard, set hardD equal to duration
            } else if (difficultly.equals("hard") && hardD.compareTo(duration)>0){
              hardD = duration;
            }
            
            try {
              //new writer to highScores
              FileWriter w = new FileWriter(highScores);
              //write high scores to "HighScores.txt"
              writeHighScore(w);      
              //close scan
              scan.close();
              //close w
              w.close();
            } catch (IOException e){
              System.out.println("Something went wrong");
            } 
            
            //create a pop-up for the win, asking if player wants to play again, if so, back to levels screen, if not, back to home screen
            if (JOptionPane.showConfirmDialog(frame, "You won! \nTime taken: " + convertTime(duration) + "\nWould you like to play again?", "Congratulations", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              //get the action listener used by the playagain button and signal to it that an action as been performed
              for(ActionListener a: playAgain.getActionListeners()) {
                a.actionPerformed(new ActionEvent(this,
                    ActionEvent.ACTION_PERFORMED, null));
              }
            } else {
              //get the action listener used by the home button and signal to it that an action as been performed
              for(ActionListener a: home.getActionListeners()) {
                a.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
              }
            }
          }
        }
      }
    }
  };
  
  /*
   * Constructor for minesweeper class 
   * Makes the minesweeper game itself, gives values to each of the instance variables, and sets up the screen
   */
  public Minesweeper(String difficult, JFrame f, JButton playAgainButton, JButton homeButton, File file){
    // calls the board constructor
    super(difficult);
    //starting instance variable values
    difficultly = difficult;
    frame = f;
    numFlags = 0;
    gameWon = false;
    turnToFix = false;
    finalDisable = false;
    //uses the playagain button given as a parameter
    playAgain = playAgainButton;
    home = homeButton;

    try {
      //file that holds fastest times taken for each difficulty
      highScores = file;

      //reader of highScores
      scan = new Scanner(highScores);

      //get the current high scores and assign them to instance variables
      getHighScores();
      
    } catch (IOException e) {
      System.out.println("Something went wrong.");
    }
    
    //sets temp to the board created by the super class board
    int[][] temp = super.getBoard();
    //squareboard created based on temp
    squareBoard = new Square[temp.length][temp[0].length];

    //for each int in temp, creates a corresponding square object
    for (int r=0; r<temp.length; r++){
      for (int c=0; c<temp[0].length; c++){
        squareBoard[r][c] = new Square(r, c, temp[r][c], difficultly, mouseListener);
      }
    } 
    //adds the square objects to the frame
    setButtons();

    //create new stopwatch and starts it
    stopwatch = new Stopwatch();
    stopwatch.start();
    //adds to the top of the minesweeper frame
    setTop();
    // adds the playagain button
    setBottom();
  }

  /*
  * Method that adds the square objects to a container that's added to the frame
  * @return void
  */
  private void setButtons(){
    // make new container object
    Container grid = new Container();
    // sets layout
    grid.setLayout(new GridLayout(squareBoard.length, squareBoard[0].length));
    // adds square objects to container
    for (int r=0; r<squareBoard.length; r++) {
      for (int c=0; c<squareBoard[0].length; c++) {
        grid.add(squareBoard[r][c]);
      }
    }
    // adds grid to the desired spot in the BorderLayout of the frame
    frame.add(grid, BorderLayout.CENTER);
  }

  /*
  * Method that adds objects to the top of the frame
  * @return void
  */
  private void setTop(){
    // creates a new panel that holds all the other objects
    JPanel panel = new JPanel();
    // changes panel background
    panel.setBackground(new java.awt.Color(179, 219, 255));
    // JLabel font
    Font font = new Font("Courier", Font.BOLD,24);
    // new JLabel title
    JLabel title = new JLabel("Minesweeper");
    title.setFont(font);
    // Creates JLabel flags
    JLabel flags = new JLabel("Flags: " + numFlags + "/" + super.getMineCount());

    String time = "";
    //depending on the difficulty of the minesweeper game, String x holds the fastest time it took to win it
    if (difficultly.equals("easy")){
      time = convertTime(easyD);
    } else if (difficultly.equals("medium")){
      time = convertTime(mediumD);
    } else if (difficultly.equals("hard")){
      time = convertTime(hardD);
    }

    //label that shows the current fastest time to win
    JLabel fastTime = new JLabel("<html>Current fastest time to win at " + difficultly + " difficulty is: " + time + "</html>");
    
    // sets a layout for panel2
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

    // Adds objects to the panel
    panel.add(title);
    panel.add(flags);
    panel.add(fastTime);
    panel.add(stopwatch);

    //creates an empty border around the panel so that elements are not on the very edges of the frame
    panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
    //centers components in a JPanel
    title.setAlignmentX(Component.CENTER_ALIGNMENT);
    flags.setAlignmentX(Component.CENTER_ALIGNMENT);
    fastTime.setAlignmentX(Component.CENTER_ALIGNMENT);
    stopwatch.setAlignmentX(Component.CENTER_ALIGNMENT);

    // adds panel to frame
    frame.add(panel, BorderLayout.PAGE_START);
  }

  /*
  * Method that adds the playagain button to the bottom
  * @return void
  */
  private void setBottom(){
    // creates new JPanel
    JPanel p = new JPanel();
    // sets background color
    p.setBackground(new java.awt.Color(179, 219, 255));

    //allows the player to give up on their current minesweeper game. the board will be revealed to them
    JButton giveUpButton = new JButton("Give Up");
    giveUpButton.setBackground(new Color(40, 48, 178));
    giveUpButton.setForeground(Color.BLACK);
    giveUpButton.setFont(new Font("Courier", Font.BOLD,15));
    giveUpButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) { 
        //disable the board
        finalDisable = true;
        //set all squares to be visible
        setAllVisible();
        //stop the stopwatch, get the final Duration, and convert duration to a string format
        Duration duration = stopwatch.stop();
        
        //create a pop-up that informs the player they have given up and asks if they would like to play again
        if (JOptionPane.showConfirmDialog(frame, "You gave up. \nTime taken: " + convertTime(duration) + "\nWould you like to play again?", "Game Over", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
          //get the action listener used by the playagain button and signal to it that an action as been performed
          for(ActionListener a: playAgain.getActionListeners()) {
            a.actionPerformed(new ActionEvent(this,
                ActionEvent.ACTION_PERFORMED, null));
          }
        } else {
          //get the action listener used by the home button and signal to it that an action as been performed
          for(ActionListener a: home.getActionListeners()) {
            a.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
          }
        } 
      }
    }); 

    // adds give up button to JPanel p
    p.add(giveUpButton);
    // centers give up button horizontally
  giveUpButton.setAlignmentX(Component.CENTER_ALIGNMENT);
    // adds panel to frame
    frame.add(p, BorderLayout.PAGE_END);
  }

  /*
   * Prints the 2D int board for testing purposes
   * @return void
   */
  public void printGrid(){
    System.out.println(super.toString()+"\n");
  }

  /*
  * Helper method that retrieves the high scores listed in "HighScores.txt"
  * @return void
  */
  private void getHighScores(){
    //loop through the 3 lines in "HighScores.txt"
    for (int i=0; i<3; i++){
      //check if there is a next line
      if (scan.hasNextLine()){
        //read in the line and assign it to String line
        String line = scan.nextLine();
        //the first line will always be the fastest time for easy difficulty
        if (i==0){
          //convert String line into Duration easyD by parsing it
          easyD = Duration.parse(line);
        //the second line will always be the fastest time for medium difficulty
        } else if (i==1){
          //convert String line into Duration mediumD by parsing it
          mediumD = Duration.parse(line);
        //the third line will always be the fastest time for hard difficulty
        } else {
          //convert String line into Duration hardD by parsing it
          hardD = Duration.parse(line);
        }
      }
    }
  }
  
  /*
  * Helper method that writes the high scores to "HighScores.txt"
  * @param FileWriter w
  * @return void
  */
  private void writeHighScore(FileWriter w){
    //exception handling
    try {
      //write the easyD Duration value with FileWriter w 
      w.write(easyD.toString() + "\n");
      //write the mediumD Duration value with FileWriter w 
      w.write(mediumD.toString() + "\n");
      //write the hardD Duration value with FileWriter w 
      w.write(hardD.toString());

    //handle IO exceptions
    } catch (IOException e) {
     System.out.println("Something went wrong."); 
    }
  }

  /*
  * Helper method that convents a Duration object into String format
  * @param Duration duration
  * @return String format of duration (min:sec:mil)
  */
  private String convertTime(Duration duration){
    //convert duration into minutes first
    long minutes = duration.toMinutes();
    //subtract the minutes from duration
    Duration d = duration.minusMinutes(minutes);
    //convert duration to milliseconds to increase accuracy
    long mil = d.toMillis();
    //get the amound of seconds from milliseconds (toMinutes() sometimes is slightly off)
    long seconds = mil / 1000;
    //subtract the seconds from milliseconds
    mil -= (seconds * 1000);
    //return the string format of duration with the converted values
    return String.format("%02d:%02d.%03d", minutes, seconds, mil);
  }
  
  /*
  * Method that sets all squares to visible
  * @return void
  */
  private void setAllVisible(){
    for (int r=0; r<squareBoard.length; r++){
      for (int c=0; c<squareBoard[r].length; c++){
        if (!squareBoard[r][c].isGuessed()){
          squareBoard[r][c].setGuessed();
        }
        //disable the square (specifically for flags)
        squareBoard[r][c].setEnabled(false);
      }
    }
  }

  /*
   * Called when the user has placed a flag on a non-mine square and has not corrected their mistake
   * @param Square button
   * @return void
   */
  private void wrongFlag(Square button){
    button.setEnabled(false);
    setAllVisible();
    finalDisable = true;

    //stop the stopwatch, get the final Duration
    Duration duration = stopwatch.stop();

    //close scan
    scan.close();
    
    //retrieved from https://docs.oracle.com/javase/7/docs/api/javax/swing/JOptionPane.html
    //also see https://docs.oracle.com/javase/7/docs/api/java/awt/event/ActionEvent.html
    //pop up to inform player of their loss and asks them if they want to play again
    if (JOptionPane.showConfirmDialog(frame, "You placed a flag on an incorrect square. \nTime taken: " + convertTime(duration) + "\nWould you like to play again?", "Game Over", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
      //get the action listener used by the playagain button and signal to it that an action as been performed
      for(ActionListener a: playAgain.getActionListeners()) {
        a.actionPerformed(new ActionEvent(this,
            ActionEvent.ACTION_PERFORMED, null));
      }
    } else {
      //get the action listener used by the home button and signal to it that an action as been performed
      for(ActionListener a: home.getActionListeners()) {
        a.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
      }
    }
  }
  
  /*
   * Private helper method used by MouseListener to do functions for each Square
   * If a mine is hit, everything is revealed and a pop-up informs the player of their loss
   * If the player has revealed the entire board without hitting any mines, a pop-up appears informing the player of their victory
   * @param Square button
   * @return void
   */
  private void buttonFunction(Square button){
    button.setGuessed();
    
    if (button.getDisplay() == 0) {
      //implement looking for other blank neighbours
      //make sure the element is not a mine and has not been counted already
      //check the element above (making sure the row will be in bounds if we subtract 1)
      if (button.getRow() > 0){
        //checks if the neighbour is a mine (9)
        if (squareBoard[button.getRow()-1][button.getCol()].getDisplay() != 9 && !squareBoard[button.getRow()-1][button.getCol()].isGuessed()){
          buttonFunction(squareBoard[button.getRow()-1][button.getCol()]);
        }
      } 
      
      //check the element below (making sure the row will be in bounds if we add 1)
      if (button.getRow() < squareBoard.length-1){
        if (squareBoard[button.getRow()+1][button.getCol()].getDisplay() != 9 && !squareBoard[button.getRow()+1][button.getCol()].isGuessed()){
          buttonFunction(squareBoard[button.getRow()+1][button.getCol()]);
        }
      }
      
      //check the element to the left (making sure col will be in bounds if we subtract 1)
      if (button.getCol() > 0){
        if (squareBoard[button.getRow()][button.getCol()-1].getDisplay() != 9 && !squareBoard[button.getRow()][button.getCol()-1].isGuessed()){
          buttonFunction(squareBoard[button.getRow()][button.getCol()-1]);
        }
      }
      
      //check the element to the right (making sure col will be in bounds if we add 1)
      if (button.getCol() < squareBoard[button.getRow()].length-1){
        if(squareBoard[button.getRow()][button.getCol()+1].getDisplay() != 9 && !squareBoard[button.getRow()][button.getCol()+1].isGuessed()){
          buttonFunction(squareBoard[button.getRow()][button.getCol()+1]);
        }
      }
      
      //check the upper-left element (making sure both row and col will be in bounds)
      if (button.getRow() > 0 && button.getCol() > 0){
        if (squareBoard[button.getRow()-1][button.getCol()-1].getDisplay() != 9 && !squareBoard[button.getRow()-1][button.getCol()-1].isGuessed()){
          buttonFunction(squareBoard[button.getRow()-1][button.getCol()-1]);
        }
      }
      
      //check the upper-right element (making sure both row and col will be in bounds)
      if (button.getRow() > 0 && button.getCol() < squareBoard[button.getRow()].length-1){
        if (squareBoard[button.getRow()-1][button.getCol()+1].getDisplay() != 9 && !squareBoard[button.getRow()-1][button.getCol()+1].isGuessed()){
          buttonFunction(squareBoard[button.getRow()-1][button.getCol()+1]);
        }
      }
      
      //check the lower-left element (making sure both row and col will be in bounds)
      if (button.getRow() < squareBoard.length-1 && button.getCol() > 0){
        if (squareBoard[button.getRow()+1][button.getCol()-1].getDisplay() != 9 && !squareBoard[button.getRow()+1][button.getCol()-1].isGuessed()){
          buttonFunction(squareBoard[button.getRow()+1][button.getCol()-1]);
        }
      }
      
      //check the lower-right element (making sure both row and col will be in bounds)
      if (button.getRow() < squareBoard.length-1 && button.getCol() < squareBoard[button.getRow()].length-1){
        if (squareBoard[button.getRow()+1][button.getCol()+1].getDisplay() != 9 && !squareBoard[button.getRow()+1][button.getCol()+1].isGuessed()){
          buttonFunction(squareBoard[button.getRow()+1][button.getCol()+1]);
        }
      } 

      //recursive part for if a square with a value between 1 and 8 (inclusive) has an empty square neighbouring it; above
    } else if (button.getDisplay() != 9){
      
      if (button.getRow() > 0 && squareBoard[button.getRow()-1][button.getCol()].getDisplay()==0 && !squareBoard[button.getRow()-1][button.getCol()].isGuessed()){
        buttonFunction(squareBoard[button.getRow()-1][button.getCol()]);
      }

      //see previous comments; below
      if (button.getRow() < squareBoard.length-1 && squareBoard[button.getRow()+1][button.getCol()].getDisplay()==0 && !squareBoard[button.getRow()+1][button.getCol()].isGuessed()){
        buttonFunction(squareBoard[button.getRow()+1][button.getCol()]);
      }

      //see previous comments; left
      if (button.getCol() > 0 && squareBoard[button.getRow()][button.getCol()-1].getDisplay()==0 && !squareBoard[button.getRow()][button.getCol()-1].isGuessed()){
        buttonFunction(squareBoard[button.getRow()][button.getCol()-1]);
      }

      //see previous comments; right
      if (button.getCol() < squareBoard[button.getRow()].length-1 && squareBoard[button.getRow()][button.getCol()+1].getDisplay()==0 && !squareBoard[button.getRow()][button.getCol()+1].isGuessed()){
        buttonFunction(squareBoard[button.getRow()][button.getCol()+1]);
      }

      //see previous comments; upper-left
      if (button.getRow() > 0 && button.getCol() > 0 && squareBoard[button.getRow()-1][button.getCol()-1].getDisplay()==0 && !squareBoard[button.getRow()-1][button.getCol()-1].isGuessed()){
        buttonFunction(squareBoard[button.getRow()-1][button.getCol()-1]);
      }

      //see previous comments; upper-right
      if (button.getRow() > 0 && button.getCol() < squareBoard[button.getRow()].length-1 && squareBoard[button.getRow()-1][button.getCol()+1].getDisplay()==0 && !squareBoard[button.getRow()-1][button.getCol()+1].isGuessed()){
        buttonFunction(squareBoard[button.getRow()-1][button.getCol()+1]);
      }

      //see previous comments; lower-left
      if (button.getRow() < squareBoard.length-1 && button.getCol() > 0 && squareBoard[button.getRow()+1][button.getCol()-1].getDisplay()==0 && !squareBoard[button.getRow()+1][button.getCol()-1].isGuessed()){
        buttonFunction(squareBoard[button.getRow()+1][button.getCol()-1]);
      }

      //see previous comments; lower-right
      if (button.getRow() < squareBoard.length-1 && button.getCol() < squareBoard[button.getRow()].length-1 && squareBoard[button.getRow()+1][button.getCol()+1].getDisplay()==0 && !squareBoard[button.getRow()+1][button.getCol()+1].isGuessed()){
        buttonFunction(squareBoard[button.getRow()+1][button.getCol()+1]);
      }
    }
    
    //check if the Square was a mine
    if (button.mineCheck() == true && !turnToFix){
      finalDisable = true;
      setAllVisible();
        
      //stop the stopwatch and get the final Duration
      Duration duration = stopwatch.stop();

      //close scan
      scan.close();
      
      //retrieved from https://docs.oracle.com/javase/7/docs/api/javax/swing/JOptionPane.html
      //also see https://docs.oracle.com/javase/7/docs/api/java/awt/event/ActionEvent.html
      //create a pop-up for the loss, asking if player wants to play again, if so, back to levels screen, if not, back to home screen
      if (JOptionPane.showConfirmDialog(frame, "You hit a mine. \nTime taken: " + convertTime(duration) + "\nWould you like to play again?", "Game Over", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        //get the action listener used by the playagain button and signal to it that an action as been performed
        for(ActionListener a: playAgain.getActionListeners()) {
          a.actionPerformed(new ActionEvent(this,
              ActionEvent.ACTION_PERFORMED, null));
        }
      } else {
        //get the action listener used by the home button and signal to it that an action as been performed
        for(ActionListener a: home.getActionListeners()) {
          a.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
        }
      }

      //as long as finalDisable has not been enacted and the Square is not a mine, check if the game is won (turnToFix is to check if the last flag was placed incorrectly)
    } else if (finalDisable == false && !turnToFix) {
      gameWon = true;

      //break out of nested for loop code from https://stackoverflow.com/questions/886955/how-do-i-break-out-of-nested-loops-in-java
      out:
      for (int r=0; r<squareBoard.length; r++){
        for (int c=0; c<squareBoard[r].length; c++){
          if (!squareBoard[r][c].isGuessed()){
            gameWon = false;
            break out;
          }
        }
      }

      //what happens when game is won
      if (gameWon){
        //activate finaldisable 
        finalDisable = true;
        
        //stop the stopwatch and get the final Duration
        Duration duration = stopwatch.stop();

        //if the difficulty is easy and the ending duration was faster than the previous time for easy, set easyD equal to duration
        if (difficultly.equals("easy") && easyD.compareTo(duration)>0){
          easyD = duration;
        //else if the difficulty is medium and the ending duration was faster than the previous time for medium, set mediumD equal to duration
        } else if (difficultly.equals("medium") && mediumD.compareTo(duration)>0){
          mediumD = duration;
        //else if the difficulty is hard and the ending duration was faster than the previous time for hard, set hardD equal to duration
        } else if (difficultly.equals("hard") && hardD.compareTo(duration)>0){
          hardD = duration;
        }
        
        try {
          //new writer to highScores
          FileWriter w = new FileWriter(highScores);
          //write high scores to "HighScores.txt"
          writeHighScore(w);
          //close scan
          scan.close();
          //close w
          w.close();
        } catch (IOException e){
          System.out.println("Something went wrong");
        } 
        
        //create a pop-up for the win, asking if player wants to play again, if so, back to levels screen, if not, back to home screen
        if (JOptionPane.showConfirmDialog(frame, "You won! \nTime taken: " + convertTime(duration) + "\nWould you like to play again?", "Congratulations", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
          //get the action listener used by the playagain button and signal to it that an action as been performed
          for(ActionListener a: playAgain.getActionListeners()) {
            a.actionPerformed(new ActionEvent(this,
                ActionEvent.ACTION_PERFORMED, null));
          }
        } else {
          //get the action listener used by the home button and signal to it that an action as been performed
          for(ActionListener a: home.getActionListeners()) {
            a.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
          }
        }        
      }
    }
  }
}